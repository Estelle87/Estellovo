// Generated by CoffeeScript 1.8.0
(function() {
  var cert, config, fs, key, listenCallback, logger, parseSet, parseSetConfig, server, serverCallback, sigma, url, useHttps;

  url = require('url');

  global.CONFIG_FILE = './config.ini';

  config = require('./config.js');

  logger = require('./logger.js');

  sigma = new require('./sigma.js')();

  logger.log('starting');

  useHttps = config.useHttps();

  server = useHttps ? require('https') : require('http');

  process.on('uncaughtException', function(err) {
    logger.log('uncaughtException: ' + err.message);
    return console.log(err);
  });

  parseSetConfig = function(query) {
    return 'Not implemented yet';
  };

  parseSet = function(query) {
    var ret;
    ret = 'Wrong command';
    if (query.string) {
      ret = sigma.setString(query.string);
    } else if (query.winString) {
      ret = sigma.setWinString(query.string);
    } else if (query.winNumber) {
      ret = sigma.setWinNumber(query.string);
    }
    return ret;
  };

  listenCallback = function() {
    var s;
    s = useHttps ? 's' : '';
    return logger.log("Server running at http" + s + "://" + (config.getHost()) + ":" + (config.getPort()) + "/");
  };

  serverCallback = function(req, res) {

    /*
    url :
    /set/
      ?winString=text
      ?winNumber=num
      ?string=text
      config?param=value&...
    
    /getConfig
     */
    var parsed, ret;
    parsed = url.parse(req.url, true);
    ret = {
      status: 'OK',
      error: ''
    };
    logger.log('new request');
    logger.log(req.url);
    logger.log(JSON.stringify(req.headers));
    switch (parsed.pathname) {
      case '/getConfig':
        ret.result = config.getFullConfig();
        break;
      case '/set/config':
        ret.result = parseSetConfig(parsed.query);
        break;
      case '/set':
        ret.result = parseSet(parsed.query);
        break;
      default:
        ret.error = 'Wrong command';
    }
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS, PUT');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.writeHead(200, {
      "Content-Type": "text/plain"
    });
    return res.end(JSON.stringify(ret));
  };

  key = cert = '';

  if (!useHttps) {
    server = server.createServer(serverCallback);
  } else {
    key = config.getHttpsKey();
    cert = config.getHttpsCert();
    fs = require('fs');
    server = server.createServer({
      key: fs.readFileSync(config.getHttpsKey()),
      cert: fs.readFileSync(config.getHttpsCert())
    }, serverCallback);
  }

  server.listen(config.getPort(), config.getHost(), listenCallback);

  server.on('error', function(e) {
    logger.log('Error in server' + JSON.stringify(e));
    if (e.code === 'EADDRINUSE') {
      logger.log('Address in use, retrying...');
      return setTimeout(function() {
        server.close();
        return server.listen(config.getPort(), config.getHost(), listenCallback);
      }, 1000);
    }
  });

}).call(this);
